package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// 仅支持: 基本类型、bytes、repeated、map(含map<K,bytes>)、嵌套 message。
// 一旦遇到 optional、enum、oneof 直接报错并中止生成。
func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}
			g := plugin.NewGeneratedFile(f.GeneratedFilenamePrefix+".clone.pb.go", f.GoImportPath)
			g.P("// Code generated by protoc-gen-goclone. DO NOT EDIT.")
			g.P("// source: ", f.Desc.Path())
			g.P("package ", f.GoPackageName)
			g.P()

			for _, m := range f.Messages {
				if err := genClone(g, m); err != nil {
					return fmt.Errorf("file %s: %w", f.Desc.Path(), err)
				}
			}
		}
		return nil
	})
}

func genClone(g *protogen.GeneratedFile, m *protogen.Message) error {
	g.P("func (m *", m.GoIdent, ") Clone() *", m.GoIdent, " {")
	g.P("    if m == nil { return nil }")
	g.P("    out := &", m.GoIdent, "{}")

	for _, field := range m.Fields {
		name := field.GoName
		kind := field.Desc.Kind()

		// ===== 校验不支持的类型 =====
		if field.Oneof != nil {
			return fmt.Errorf("message %s: field %s is oneof, which is not supported", m.GoIdent.GoName, name)
		}
		if field.Desc.HasOptionalKeyword() {
			return fmt.Errorf("message %s: field %s is optional, which is not supported", m.GoIdent.GoName, name)
		}
		if kind == protoreflect.EnumKind {
			return fmt.Errorf("message %s: field %s is enum, which is not supported", m.GoIdent.GoName, name)
		}

		// ===== 生成 Clone 代码 =====
		switch {
		// ---------- map<K,V> ----------
		case field.Desc.IsMap():
			keyField := field.Message.Fields[0]
			valField := field.Message.Fields[1]
			keyType := scalarGoType(keyField.Desc.Kind())

			switch {
			case valField.Message != nil:
				// map<K, message>
				g.P("    if m.", name, " != nil {")
				g.P("        out.", name, " = make(map[", keyType, "]*", valField.Message.GoIdent.GoName, ", len(m.", name, "))")
				g.P("        for k, v := range m.", name, " { if v != nil { out.", name, "[k] = v.Clone() } }")
				g.P("    }")

			case valField.Desc.Kind() == protoreflect.BytesKind:
				// map<K, bytes>
				g.P("    if m.", name, " != nil {")
				g.P("        out.", name, " = make(map[", keyType, "][]byte, len(m.", name, "))")
				g.P("        for k, v := range m.", name, " {")
				g.P("            if v != nil {")
				g.P("                cp := make([]byte, len(v))")
				g.P("                copy(cp, v)")
				g.P("                out.", name, "[k] = cp")
				g.P("            }")
				g.P("        }")
				g.P("    }")

			default:
				// map<K, scalar>
				valType := scalarGoType(valField.Desc.Kind())
				g.P("    if m.", name, " != nil {")
				g.P("        out.", name, " = make(map[", keyType, "]", valType, ", len(m.", name, "))")
				g.P("        for k, v := range m.", name, " { out.", name, "[k] = v }")
				g.P("    }")
			}

		// ---------- repeated ----------
		case field.Desc.IsList():
			if field.Message != nil {
				// repeated message
				g.P("    if len(m.", name, ") > 0 {")
				g.P("        out.", name, " = make([]*", field.Message.GoIdent.GoName, ", len(m.", name, "))")
				g.P("        for i, v := range m.", name, " { if v != nil { out.", name, "[i] = v.Clone() } }")
				g.P("    }")
			} else if kind == protoreflect.BytesKind {
				// repeated bytes
				g.P("    if len(m.", name, ") > 0 {")
				g.P("        out.", name, " = make([][]byte, len(m.", name, "))")
				g.P("        for i, v := range m.", name, " {")
				g.P("            if v != nil {")
				g.P("                cp := make([]byte, len(v))")
				g.P("                copy(cp, v)")
				g.P("                out.", name, "[i] = cp")
				g.P("            }")
				g.P("        }")
				g.P("    }")
			} else {
				// repeated scalar
				elemType := scalarGoType(kind)
				g.P("    out.", name, " = append([]", elemType, "{}, m.", name, "...)")
			}

		// ---------- 单个 message ----------
		case field.Message != nil:
			g.P("    if m.", name, " != nil { out.", name, " = m.", name, ".Clone() }")

		// ---------- bytes ----------
		case kind == protoreflect.BytesKind:
			g.P("    if m.", name, " != nil {")
			g.P("        out.", name, " = make([]byte, len(m.", name, "))")
			g.P("        copy(out.", name, ", m.", name, ")")
			g.P("    }")

		// ---------- 基本类型 ----------
		default:
			g.P("    out.", name, " = m.", name)
		}
	}

	g.P("    return out")
	g.P("}")
	g.P()
	return nil
}

// scalarGoType 返回 Go 的基本类型名称，用于 repeated scalar 或 map<K,V>
func scalarGoType(k protoreflect.Kind) string {
	switch k {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		return "int32"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		return "int64"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		return "uint32"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "uint64"
	case protoreflect.FloatKind:
		return "float32"
	case protoreflect.DoubleKind:
		return "float64"
	case protoreflect.StringKind:
		return "string"
	case protoreflect.BytesKind:
		return "[]byte"
	default:
		// 理论上不会到这里，因为 oneof/enum 已在上层报错
		panic(fmt.Sprintf("unsupported scalar kind: %v", k))
	}
}
